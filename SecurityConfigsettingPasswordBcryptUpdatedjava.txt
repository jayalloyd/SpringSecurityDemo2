package com.meenus.SpringSecurityDemo;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Autowired
     private UserDetailsService userDetailsService;
    @Bean
    public AuthenticationProvider authenticationProvider(){
        DaoAuthenticationProvider provider=new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(new BCryptPasswordEncoder(10));//currently Setting password Encoder as BCryptEncoder



        return provider;

    }
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http)  throws Exception{
        //to change configuration we have to create object security filter chain ...
        //by default spring will define it...if we didnt specify
       http.csrf(customizer->customizer.disable());//disabling csrf
               http.authorizeHttpRequests(request->request.anyRequest().authenticated());//enabling the security for the requests
        //formLogin(Customizer.withDefaults());//gets form login and can use in postman also
        http.httpBasic(Customizer.withDefaults());
        http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));//making it stateless



     return http.build();

    }
    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder(){
        return new BCryptPasswordEncoder(10);
    }
//    @Bean
//    public UserDetailsService userDetailsService(){//spring security will actually look at the
//        //UserDetailsService Object and finds the user details
//        UserDetails user= User.withDefaultPasswordEncoder().username("navin").password("n@123").roles("user").build();
//        UserDetails admin= User.withDefaultPasswordEncoder().username("lloyd").password("l@123").roles("admin").build();
//
//        return new InMemoryUserDetailsManager(user,admin);
//
//
//    }
}
